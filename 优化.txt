布局优化
1.使用include标签：复用常用布局文件，提高开发效率
2.使用merge标签：复用父布局，减少布局层级与嵌套，配合include标签使用
3.使用viewstub标签：布局的懒加载，适用于展示机率比较低的布局
4.简单布局使用LinearLayout和FrameLayout
5.复杂布局使用ConstraintLayout

绘制优化
android系统每16ms发出一次vsync信号，这样正常情况下能保证60fps，需要减轻onDraw的负担
不允许在onDraw中出现：
1.不做耗时操作
2.不做大量循环，嵌套循环
3.不重复创建对象（会造成内存抖动，消耗GC性能，一样会影响界面绘制）

内存优化
内存泄漏：当无用内存无法被GC清除，即为内存泄漏。内存泄漏的现象是内存占比一点点上升，并不会还原到之前的状态，
然后到达GC阀值，频繁触发GC，造成系统卡顿，最后内存爆炸，应用崩溃。
常见内存泄漏场景：
1.集合类泄漏：集合引用持有大量元素引用，导致元素引用无法被回收
2.单例泄漏：单列中持有生命周期较短的引用，比如Activity的上下文对象
3.内部类泄漏：非静态内部类或者匿名内部类会持有外部类引用，如果内部类的生命周期长于外部类的生命周期，就会导致
外部类的引用无法及时释放，可以使用静态的方式配合弱引用的方式处理
4.资源未释放泄漏：网络或文件IO，动态广播注册/反注册，EventBus注册/反注册

启动优化
冷启动：5s
温启动：2s
热启动：1.5s

